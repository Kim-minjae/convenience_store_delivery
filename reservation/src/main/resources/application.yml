server:
  port: 8080
spring:
  application:
    name: reservation
---

spring:
  profiles: default
  jpa:
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQL57Dialect
    datasource:
      url: jdbc:mysql://${mysql:35.221.110.118:3306}/${_DATASOURCE_TABLESPACE:my-database}
      username: ${root:root1}
      password: ${admin:secretpassword}
      driverClassName: com.mysql.cj.jdbc.Driver
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka-0.my-kafka-headless.default.svc.cluster.local:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: reservation
          destination: conveniencestoredelivery
          contentType: application/json
        event-out:
          destination: conveniencestoredelivery
          contentType: application/json

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

api:
  url:
    delivery: delivery:8083


server:
  port: 8081

---

spring:
  profiles: docker
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka-0.my-kafka-headless.default.svc.cluster.local:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: reservation
          destination: conveniencestoredelivery
          contentType: application/json
        event-out:
          destination: conveniencestoredelivery
          contentType: application/json

api:
  url:
    delivery: delivery:8080


